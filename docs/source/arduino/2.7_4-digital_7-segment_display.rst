.. _ar_4_digit:

2.7 4-Digital-7-Segment-Anzeige
================================

Überblick
-------------

In dieser Lektion lernen Sie die 4-Digital-7-Segment-Anzeige kennen. Es besteht aus vier 7-Segment-Anzeigen, die zusammenarbeiten, um 4-stellige Zahlen anzuzeigen.


Erforderliche Komponenten
---------------------------------

.. image:: img/list_2.7.png

* :ref:`cpn_mega2560`
* :ref:`cpn_breadboard`
* :ref:`cpn_wires`
* :ref:`cpn_resistor`
* :ref:`cpn_4_digit`

Fritzing-Schaltung
--------------------------


.. image:: img/image438.png

Schematische Darstellung
----------------------------------------

.. image:: img/image439.png


Code
----



.. note::

    * Sie können die Datei ``2.7_4digitalSegment.ino`` unter dem Pfad ``sunfounder_vincent_kit_for_arduino\code\2.7_4digitalSegment`` direkt öffnen.
    * Hier wird die ``TimerOne``-Bibliothek verwendet, die Sie aus dem **Library Manager** installieren können.

        .. image:: img/lib_timerone.png
            :align: center

.. raw:: html

    <iframe src=https://create.arduino.cc/editor/sunfounder01/1a717c75-35df-4674-be90-a5d290f7065d/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

Code-Analyse
-------------

.. image:: img/image440.png
.. image:: img/image441.png

Es gibt zwei Punkte, die Ihre Aufmerksamkeit erfordern:

1. Da jede Segmentanzeige in der 4-Digital-7-Segment-Anzeige unabhängig arbeitet, wird das Prinzip der visuellen Persistenz angewendet, um jedes 7-Segment-Zeichen schnell nacheinander anzuzeigen, um eine fortlaufende Zeichenfolge zu bilden.

Siehe :ref:`ar_7_segment`, um die Details der Zahlenanzeige der 4-Digital-7-Segment-Anzeige zu überprüfen.



2. In diesem Beispiel wird eine Bibliothek TimerOne.h verwendet, um die Funktion des Zählens zu realisieren.

.. code-block:: arduino

    #include "TimerOne.h"

**Bibliotheksfunktionen**:

.. code-block:: arduino

    void initialize(long microsenconds=1000000)

Sie müssen diese Methode zuerst aufrufen, um eine der anderen Methoden zu verwenden. Optional können Sie hier die Zeitdauer des Timers angeben (in Mikrosekunden), standardmäßig ist sie auf 1 Sekunde eingestellt.

.. note:: 
    Dies unterbricht ``analogWrite()`` für die digitalen Pins 9 und 10 auf Arduino.

.. code-block:: arduino

    void attachInterrupt(void (*isr)(), long microseconds=-1);

Ruft eine Funktion im angegebenen Intervall in Mikrosekunden auf. Seien Sie vorsichtig, wenn Sie versuchen, einen zu komplizierten Interrupt mit zu hoher Frequenz auszuführen, da die CPU sonst möglicherweise nie in die Hauptschleife eintritt und Ihr Programm "blockiert". Beachten Sie, dass Sie optional den Zeitraum mit dieser Funktion festlegen können, wenn Sie beim Aufruf einen Wert in Mikrosekunden als letzten Parameter angeben.

.. code-block:: arduino

    void detachInterrupte();

Deaktiviert den angehängten Interrupt.

Phänomen Bild
------------------

.. image:: img/image104.jpeg

